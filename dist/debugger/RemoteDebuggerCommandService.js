"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.observeRemoteDebugCommands = observeRemoteDebugCommands;
exports.observeAttachDebugTargets = observeAttachDebugTargets;

var _http = _interopRequireDefault(require("http"));

var _net = _interopRequireDefault(require("net"));

var _rxjsCompatUmdMin = require("rxjs-compat/bundles/rxjs-compat.umd.min.js");

var _log4js = require("log4js");

var _promise = require("@atom-ide-community/nuclide-commons/promise");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let isServerSetup = false;
const debugRequests = new _rxjsCompatUmdMin.Subject();
const attachReady = new Map();
const DEBUGGER_REGISTRY_PORT = 9615;

function observeRemoteDebugCommands() {
  let setupStep;

  if (!isServerSetup) {
    setupStep = _rxjsCompatUmdMin.Observable.fromPromise(setupServer()).ignoreElements();
  } else {
    setupStep = _rxjsCompatUmdMin.Observable.empty();
  }

  return setupStep.concat(debugRequests).publish();
}

function observeAttachDebugTargets() {
  // Validate attach-ready values with the processes with used ports (ready to attach).
  // Note: we can't use process ids because we could be debugging processes inside containers
  // where the process ids don't map to the host running this code.
  return _rxjsCompatUmdMin.Observable.interval(3000).startWith(0).switchMap(() => Promise.all(Array.from(attachReady.values()).map(async target => {
    if (!(await isPortUsed(target.port))) {
      attachReady.delete(target.port);
    }
  }))).map(() => Array.from(attachReady.values())).publish();
}

function isPortUsed(port) {
  const tryConnectPromise = new Promise((resolve, reject) => {
    const client = new _net.default.Socket();
    client.once('connect', () => {
      cleanUp();
      resolve(true);
    }).once('error', err => {
      cleanUp();
      resolve(err.code !== 'ECONNREFUSED');
    });

    function cleanUp() {
      client.removeAllListeners('connect');
      client.removeAllListeners('error');
      client.end();
      client.destroy();
      client.unref();
    }

    client.connect({
      port,
      host: '127.0.0.1'
    });
  }); // Trying to connect can take multiple seconds, then times out (if the server is busy).
  // Hence, we need to fallback to `true`.

  const connectTimeoutPromise = (0, _promise.sleep)(1000).then(() => true);
  return Promise.race([tryConnectPromise, connectTimeoutPromise]);
}

function setupServer() {
  return new Promise((resolve, reject) => {
    _http.default.createServer((req, res) => {
      if (req.method !== 'POST') {
        res.writeHead(500, {
          'Content-Type': 'text/html'
        });
        res.end('Invalid request');
      } else {
        let body = '';
        req.on('data', data => {
          body += data;
        });
        req.on('end', () => {
          handleJsonRequest(JSON.parse(body), res);
        });
      }
    }).on('error', reject).listen(DEBUGGER_REGISTRY_PORT, () => {
      isServerSetup = true;
      resolve();
    });
  });
}

function handleJsonRequest(body, res) {
  res.writeHead(200, {
    'Content-Type': 'application/json'
  });
  const {
    domain,
    command,
    type
  } = body;
  let success = false;

  if (domain !== 'debug' || type !== 'python') {
    res.end(JSON.stringify({
      success
    }));
    return;
  }

  if (command === 'enable-attach') {
    const port = Number(body.port);
    const {
      options
    } = body;
    const target = {
      port,
      id: options.id,
      localRoot: options.localRoot,
      remoteRoot: options.remoteRoot,
      debugOptions: options.debugOptions
    };
    attachReady.set(port, target);
    (0, _log4js.getLogger)().info('Remote debug target is ready to attach', target);
    success = true;
  } else if (command === 'attach') {
    const port = Number(body.port);
    (0, _log4js.getLogger)().info('Remote debug target attach request', body);
    const target = attachReady.get(port);

    if (target != null) {
      debugRequests.next({
        type,
        command,
        target
      });
      success = true;
    }
  }

  res.end(JSON.stringify({
    success
  }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJlbW90ZURlYnVnZ2VyQ29tbWFuZFNlcnZpY2UuanMiXSwibmFtZXMiOlsiaXNTZXJ2ZXJTZXR1cCIsImRlYnVnUmVxdWVzdHMiLCJTdWJqZWN0IiwiYXR0YWNoUmVhZHkiLCJNYXAiLCJERUJVR0dFUl9SRUdJU1RSWV9QT1JUIiwib2JzZXJ2ZVJlbW90ZURlYnVnQ29tbWFuZHMiLCJzZXR1cFN0ZXAiLCJPYnNlcnZhYmxlIiwiZnJvbVByb21pc2UiLCJzZXR1cFNlcnZlciIsImlnbm9yZUVsZW1lbnRzIiwiZW1wdHkiLCJjb25jYXQiLCJwdWJsaXNoIiwib2JzZXJ2ZUF0dGFjaERlYnVnVGFyZ2V0cyIsImludGVydmFsIiwic3RhcnRXaXRoIiwic3dpdGNoTWFwIiwiUHJvbWlzZSIsImFsbCIsIkFycmF5IiwiZnJvbSIsInZhbHVlcyIsIm1hcCIsInRhcmdldCIsImlzUG9ydFVzZWQiLCJwb3J0IiwiZGVsZXRlIiwidHJ5Q29ubmVjdFByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiY2xpZW50IiwibmV0IiwiU29ja2V0Iiwib25jZSIsImNsZWFuVXAiLCJlcnIiLCJjb2RlIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW5kIiwiZGVzdHJveSIsInVucmVmIiwiY29ubmVjdCIsImhvc3QiLCJjb25uZWN0VGltZW91dFByb21pc2UiLCJ0aGVuIiwicmFjZSIsImh0dHAiLCJjcmVhdGVTZXJ2ZXIiLCJyZXEiLCJyZXMiLCJtZXRob2QiLCJ3cml0ZUhlYWQiLCJib2R5Iiwib24iLCJkYXRhIiwiaGFuZGxlSnNvblJlcXVlc3QiLCJKU09OIiwicGFyc2UiLCJsaXN0ZW4iLCJkb21haW4iLCJjb21tYW5kIiwidHlwZSIsInN1Y2Nlc3MiLCJzdHJpbmdpZnkiLCJOdW1iZXIiLCJvcHRpb25zIiwiaWQiLCJsb2NhbFJvb3QiLCJyZW1vdGVSb290IiwiZGVidWdPcHRpb25zIiwic2V0IiwiaW5mbyIsImdldCIsIm5leHQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FB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O0FBR2pCckMsUUFBQUE7QUFIaUIsT0FBbkI7QUFLQXVDLE1BQUFBLE9BQU8sR0FBRyxJQUFWO0FBQ0Q7QUFDRjs7QUFDRGIsRUFBQUEsR0FBRyxDQUFDWCxHQUFKLENBQVFrQixJQUFJLENBQUNPLFNBQUwsQ0FBZTtBQUFDRCxJQUFBQTtBQUFELEdBQWYsQ0FBUjtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUge0Nvbm5lY3RhYmxlT2JzZXJ2YWJsZX0gZnJvbSAncnhqcy1jb21wYXQvYnVuZGxlcy9yeGpzLWNvbXBhdC51bWQubWluLmpzJztcblxuaW1wb3J0IGh0dHAgZnJvbSAnaHR0cCc7XG5pbXBvcnQgbmV0IGZyb20gJ25ldCc7XG5pbXBvcnQge09ic2VydmFibGUsIFN1YmplY3R9IGZyb20gJ3J4anMtY29tcGF0L2J1bmRsZXMvcnhqcy1jb21wYXQudW1kLm1pbi5qcyc7XG5pbXBvcnQge2dldExvZ2dlcn0gZnJvbSAnbG9nNGpzJztcbmltcG9ydCB7c2xlZXB9IGZyb20gJ0BhdG9tLWlkZS1jb21tdW5pdHkvbnVjbGlkZS1jb21tb25zL3Byb21pc2UnO1xuXG5sZXQgaXNTZXJ2ZXJTZXR1cCA9IGZhbHNlO1xuXG5leHBvcnQgdHlwZSBSZW1vdGVEZWJ1Z0NvbW1hbmRSZXF1ZXN0ID0ge1xuICB0eXBlOiAncHl0aG9uJyxcbiAgY29tbWFuZDogJ2F0dGFjaCcsXG4gIHRhcmdldDogUHl0aG9uRGVidWdnZXJBdHRhY2hUYXJnZXQsXG59O1xuXG5leHBvcnQgdHlwZSBQeXRob25EZWJ1Z2dlckF0dGFjaFRhcmdldCA9IHtcbiAgcG9ydDogbnVtYmVyLFxuICBsb2NhbFJvb3Q6ID9zdHJpbmcsXG4gIHJlbW90ZVJvb3Q6ID9zdHJpbmcsXG4gIGRlYnVnT3B0aW9uczogP0FycmF5PHN0cmluZz4sXG4gIGlkOiA/c3RyaW5nLFxufTtcblxuY29uc3QgZGVidWdSZXF1ZXN0czogU3ViamVjdDxSZW1vdGVEZWJ1Z0NvbW1hbmRSZXF1ZXN0PiA9IG5ldyBTdWJqZWN0KCk7XG5jb25zdCBhdHRhY2hSZWFkeTogTWFwPG51bWJlciwgUHl0aG9uRGVidWdnZXJBdHRhY2hUYXJnZXQ+ID0gbmV3IE1hcCgpO1xuY29uc3QgREVCVUdHRVJfUkVHSVNUUllfUE9SVCA9IDk2MTU7XG5cbmV4cG9ydCBmdW5jdGlvbiBvYnNlcnZlUmVtb3RlRGVidWdDb21tYW5kcygpOiBDb25uZWN0YWJsZU9ic2VydmFibGU8XG4gIFJlbW90ZURlYnVnQ29tbWFuZFJlcXVlc3QsXG4+IHtcbiAgbGV0IHNldHVwU3RlcDtcbiAgaWYgKCFpc1NlcnZlclNldHVwKSB7XG4gICAgc2V0dXBTdGVwID0gT2JzZXJ2YWJsZS5mcm9tUHJvbWlzZShzZXR1cFNlcnZlcigpKS5pZ25vcmVFbGVtZW50cygpO1xuICB9IGVsc2Uge1xuICAgIHNldHVwU3RlcCA9IE9ic2VydmFibGUuZW1wdHkoKTtcbiAgfVxuICByZXR1cm4gc2V0dXBTdGVwLmNvbmNhdChkZWJ1Z1JlcXVlc3RzKS5wdWJsaXNoKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvYnNlcnZlQXR0YWNoRGVidWdUYXJnZXRzKCk6IENvbm5lY3RhYmxlT2JzZXJ2YWJsZTxcbiAgQXJyYXk8UHl0aG9uRGVidWdnZXJBdHRhY2hUYXJnZXQ+LFxuPiB7XG4gIC8vIFZhbGlkYXRlIGF0dGFjaC1yZWFkeSB2YWx1ZXMgd2l0aCB0aGUgcHJvY2Vzc2VzIHdpdGggdXNlZCBwb3J0cyAocmVhZHkgdG8gYXR0YWNoKS5cbiAgLy8gTm90ZTogd2UgY2FuJ3QgdXNlIHByb2Nlc3MgaWRzIGJlY2F1c2Ugd2UgY291bGQgYmUgZGVidWdnaW5nIHByb2Nlc3NlcyBpbnNpZGUgY29udGFpbmVyc1xuICAvLyB3aGVyZSB0aGUgcHJvY2VzcyBpZHMgZG9uJ3QgbWFwIHRvIHRoZSBob3N0IHJ1bm5pbmcgdGhpcyBjb2RlLlxuICByZXR1cm4gT2JzZXJ2YWJsZS5pbnRlcnZhbCgzMDAwKVxuICAgIC5zdGFydFdpdGgoMClcbiAgICAuc3dpdGNoTWFwKCgpID0+XG4gICAgICBQcm9taXNlLmFsbChcbiAgICAgICAgQXJyYXkuZnJvbShhdHRhY2hSZWFkeS52YWx1ZXMoKSkubWFwKGFzeW5jIHRhcmdldCA9PiB7XG4gICAgICAgICAgaWYgKCEoYXdhaXQgaXNQb3J0VXNlZCh0YXJnZXQucG9ydCkpKSB7XG4gICAgICAgICAgICBhdHRhY2hSZWFkeS5kZWxldGUodGFyZ2V0LnBvcnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICApLFxuICAgIClcbiAgICAubWFwKCgpID0+IEFycmF5LmZyb20oYXR0YWNoUmVhZHkudmFsdWVzKCkpKVxuICAgIC5wdWJsaXNoKCk7XG59XG5cbmZ1bmN0aW9uIGlzUG9ydFVzZWQocG9ydDogbnVtYmVyKTogUHJvbWlzZTxib29sZWFuPiB7XG4gIGNvbnN0IHRyeUNvbm5lY3RQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IGNsaWVudCA9IG5ldyBuZXQuU29ja2V0KCk7XG4gICAgY2xpZW50XG4gICAgICAub25jZSgnY29ubmVjdCcsICgpID0+IHtcbiAgICAgICAgY2xlYW5VcCgpO1xuICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgfSlcbiAgICAgIC5vbmNlKCdlcnJvcicsIGVyciA9PiB7XG4gICAgICAgIGNsZWFuVXAoKTtcbiAgICAgICAgcmVzb2x2ZShlcnIuY29kZSAhPT0gJ0VDT05OUkVGVVNFRCcpO1xuICAgICAgfSk7XG5cbiAgICBmdW5jdGlvbiBjbGVhblVwKCkge1xuICAgICAgY2xpZW50LnJlbW92ZUFsbExpc3RlbmVycygnY29ubmVjdCcpO1xuICAgICAgY2xpZW50LnJlbW92ZUFsbExpc3RlbmVycygnZXJyb3InKTtcbiAgICAgIGNsaWVudC5lbmQoKTtcbiAgICAgIGNsaWVudC5kZXN0cm95KCk7XG4gICAgICBjbGllbnQudW5yZWYoKTtcbiAgICB9XG5cbiAgICBjbGllbnQuY29ubmVjdCh7cG9ydCwgaG9zdDogJzEyNy4wLjAuMSd9KTtcbiAgfSk7XG4gIC8vIFRyeWluZyB0byBjb25uZWN0IGNhbiB0YWtlIG11bHRpcGxlIHNlY29uZHMsIHRoZW4gdGltZXMgb3V0IChpZiB0aGUgc2VydmVyIGlzIGJ1c3kpLlxuICAvLyBIZW5jZSwgd2UgbmVlZCB0byBmYWxsYmFjayB0byBgdHJ1ZWAuXG4gIGNvbnN0IGNvbm5lY3RUaW1lb3V0UHJvbWlzZSA9IHNsZWVwKDEwMDApLnRoZW4oKCkgPT4gdHJ1ZSk7XG4gIHJldHVybiBQcm9taXNlLnJhY2UoW3RyeUNvbm5lY3RQcm9taXNlLCBjb25uZWN0VGltZW91dFByb21pc2VdKTtcbn1cblxuZnVuY3Rpb24gc2V0dXBTZXJ2ZXIoKTogUHJvbWlzZTx2b2lkPiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgaHR0cFxuICAgICAgLmNyZWF0ZVNlcnZlcigocmVxLCByZXMpID0+IHtcbiAgICAgICAgaWYgKHJlcS5tZXRob2QgIT09ICdQT1NUJykge1xuICAgICAgICAgIHJlcy53cml0ZUhlYWQoNTAwLCB7J0NvbnRlbnQtVHlwZSc6ICd0ZXh0L2h0bWwnfSk7XG4gICAgICAgICAgcmVzLmVuZCgnSW52YWxpZCByZXF1ZXN0Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGV0IGJvZHkgPSAnJztcbiAgICAgICAgICByZXEub24oJ2RhdGEnLCBkYXRhID0+IHtcbiAgICAgICAgICAgIGJvZHkgKz0gZGF0YTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXEub24oJ2VuZCcsICgpID0+IHtcbiAgICAgICAgICAgIGhhbmRsZUpzb25SZXF1ZXN0KEpTT04ucGFyc2UoYm9keSksIHJlcyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAub24oJ2Vycm9yJywgcmVqZWN0KVxuICAgICAgLmxpc3RlbigoREVCVUdHRVJfUkVHSVNUUllfUE9SVDogYW55KSwgKCkgPT4ge1xuICAgICAgICBpc1NlcnZlclNldHVwID0gdHJ1ZTtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVKc29uUmVxdWVzdChib2R5LCByZXMpIHtcbiAgcmVzLndyaXRlSGVhZCgyMDAsIHsnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nfSk7XG4gIGNvbnN0IHtkb21haW4sIGNvbW1hbmQsIHR5cGV9ID0gYm9keTtcbiAgbGV0IHN1Y2Nlc3MgPSBmYWxzZTtcbiAgaWYgKGRvbWFpbiAhPT0gJ2RlYnVnJyB8fCB0eXBlICE9PSAncHl0aG9uJykge1xuICAgIHJlcy5lbmQoSlNPTi5zdHJpbmdpZnkoe3N1Y2Nlc3N9KSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChjb21tYW5kID09PSAnZW5hYmxlLWF0dGFjaCcpIHtcbiAgICBjb25zdCBwb3J0ID0gTnVtYmVyKGJvZHkucG9ydCk7XG4gICAgY29uc3Qge29wdGlvbnN9ID0gYm9keTtcbiAgICBjb25zdCB0YXJnZXQgPSB7XG4gICAgICBwb3J0LFxuICAgICAgaWQ6IG9wdGlvbnMuaWQsXG4gICAgICBsb2NhbFJvb3Q6IG9wdGlvbnMubG9jYWxSb290LFxuICAgICAgcmVtb3RlUm9vdDogb3B0aW9ucy5yZW1vdGVSb290LFxuICAgICAgZGVidWdPcHRpb25zOiBvcHRpb25zLmRlYnVnT3B0aW9ucyxcbiAgICB9O1xuICAgIGF0dGFjaFJlYWR5LnNldChwb3J0LCB0YXJnZXQpO1xuICAgIGdldExvZ2dlcigpLmluZm8oJ1JlbW90ZSBkZWJ1ZyB0YXJnZXQgaXMgcmVhZHkgdG8gYXR0YWNoJywgdGFyZ2V0KTtcbiAgICBzdWNjZXNzID0gdHJ1ZTtcbiAgfSBlbHNlIGlmIChjb21tYW5kID09PSAnYXR0YWNoJykge1xuICAgIGNvbnN0IHBvcnQgPSBOdW1iZXIoYm9keS5wb3J0KTtcbiAgICBnZXRMb2dnZXIoKS5pbmZvKCdSZW1vdGUgZGVidWcgdGFyZ2V0IGF0dGFjaCByZXF1ZXN0JywgYm9keSk7XG4gICAgY29uc3QgdGFyZ2V0ID0gYXR0YWNoUmVhZHkuZ2V0KHBvcnQpO1xuICAgIGlmICh0YXJnZXQgIT0gbnVsbCkge1xuICAgICAgZGVidWdSZXF1ZXN0cy5uZXh0KHtcbiAgICAgICAgdHlwZSxcbiAgICAgICAgY29tbWFuZCxcbiAgICAgICAgdGFyZ2V0LFxuICAgICAgfSk7XG4gICAgICBzdWNjZXNzID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmVzLmVuZChKU09OLnN0cmluZ2lmeSh7c3VjY2Vzc30pKTtcbn1cbiJdfQ==