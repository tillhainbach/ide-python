// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const React = require("react");

class PostOffice extends React.Component {
  constructor(props) {
    super(props);

    this.handleMessages = ev => __awaiter(this, void 0, void 0, function* () {
      if (this.props) {
        const msg = ev.data;

        if (msg) {
          this.props.messageHandlers.forEach(h => {
            h.handleMessage(msg.type, msg.payload);
          });
        }
      }
    });
  }

  static canSendMessages() {
    if (PostOffice.acquireApi()) {
      return true;
    }

    return false;
  }

  static sendMessage(message) {
    if (PostOffice.canSendMessages()) {
      const api = PostOffice.acquireApi();

      if (api) {
        api.postMessage(message);
      }
    }
  }

  static acquireApi() {
    // Only do this once as it crashes if we ask more than once
    if (!PostOffice.vscodeApi && // tslint:disable-next-line:no-typeof-undefined
    typeof acquireVsCodeApi !== 'undefined') {
      PostOffice.vscodeApi = acquireVsCodeApi();
    }

    return PostOffice.vscodeApi;
  }

  componentDidMount() {
    window.addEventListener('message', this.handleMessages);
  }

  componentWillUnmount() {
    window.removeEventListener('message', this.handleMessages);
  }

  render() {
    return null;
  }

}

exports.PostOffice = PostOffice;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBvc3RPZmZpY2UuanMiXSwibmFtZXMiOlsiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJ2YWx1ZSIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsIlJlYWN0IiwicmVxdWlyZSIsIlBvc3RPZmZpY2UiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwiaGFuZGxlTWVzc2FnZXMiLCJldiIsIm1zZyIsImRhdGEiLCJtZXNzYWdlSGFuZGxlcnMiLCJmb3JFYWNoIiwiaCIsImhhbmRsZU1lc3NhZ2UiLCJ0eXBlIiwicGF5bG9hZCIsImNhblNlbmRNZXNzYWdlcyIsImFjcXVpcmVBcGkiLCJzZW5kTWVzc2FnZSIsIm1lc3NhZ2UiLCJhcGkiLCJwb3N0TWVzc2FnZSIsInZzY29kZUFwaSIsImFjcXVpcmVWc0NvZGVBcGkiLCJjb21wb25lbnREaWRNb3VudCIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZW5kZXIiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQSxJQUFJQSxTQUFTLEdBQUksVUFBUSxTQUFLQSxTQUFkLElBQTRCLFVBQVVDLE9BQVYsRUFBbUJDLFVBQW5CLEVBQStCQyxDQUEvQixFQUFrQ0MsU0FBbEMsRUFBNkM7QUFDckYsU0FBTyxLQUFLRCxDQUFDLEtBQUtBLENBQUMsR0FBR0UsT0FBVCxDQUFOLEVBQXlCLFVBQVVDLE9BQVYsRUFBbUJDLE1BQW5CLEVBQTJCO0FBQ3ZELGFBQVNDLFNBQVQsQ0FBbUJDLEtBQW5CLEVBQTBCO0FBQUUsVUFBSTtBQUFFQyxRQUFBQSxJQUFJLENBQUNO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aUIsR0FBRztBQUNoQkMsSUFBQUEsTUFBTSxDQUFDQyxnQkFBUCxDQUF3QixTQUF4QixFQUFtQyxLQUFLcEIsY0FBeEM7QUFDSDs7QUFDRHFCLEVBQUFBLG9CQUFvQixHQUFHO0FBQ25CRixJQUFBQSxNQUFNLENBQUNHLG1CQUFQLENBQTJCLFNBQTNCLEVBQXNDLEtBQUt0QixjQUEzQztBQUNIOztBQUNEdUIsRUFBQUEsTUFBTSxHQUFHO0FBQ0wsV0FBTyxJQUFQO0FBQ0g7O0FBN0NvQzs7QUErQ3pDOUIsT0FBTyxDQUFDRyxVQUFSLEdBQXFCQSxVQUFyQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuJ3VzZSBzdHJpY3QnO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZShyZXN1bHQudmFsdWUpOyB9KS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmNsYXNzIFBvc3RPZmZpY2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5oYW5kbGVNZXNzYWdlcyA9IChldikgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtc2cgPSBldi5kYXRhO1xuICAgICAgICAgICAgICAgIGlmIChtc2cpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5tZXNzYWdlSGFuZGxlcnMuZm9yRWFjaCgoaCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaC5oYW5kbGVNZXNzYWdlKG1zZy50eXBlLCBtc2cucGF5bG9hZCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHN0YXRpYyBjYW5TZW5kTWVzc2FnZXMoKSB7XG4gICAgICAgIGlmIChQb3N0T2ZmaWNlLmFjcXVpcmVBcGkoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBzdGF0aWMgc2VuZE1lc3NhZ2UobWVzc2FnZSkge1xuICAgICAgICBpZiAoUG9zdE9mZmljZS5jYW5TZW5kTWVzc2FnZXMoKSkge1xuICAgICAgICAgICAgY29uc3QgYXBpID0gUG9zdE9mZmljZS5hY3F1aXJlQXBpKCk7XG4gICAgICAgICAgICBpZiAoYXBpKSB7XG4gICAgICAgICAgICAgICAgYXBpLnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyBhY3F1aXJlQXBpKCkge1xuICAgICAgICAvLyBPbmx5IGRvIHRoaXMgb25jZSBhcyBpdCBjcmFzaGVzIGlmIHdlIGFzayBtb3JlIHRoYW4gb25jZVxuICAgICAgICBpZiAoIVBvc3RPZmZpY2UudnNjb2RlQXBpICYmXG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tdHlwZW9mLXVuZGVmaW5lZFxuICAgICAgICAgICAgdHlwZW9mIGFjcXVpcmVWc0NvZGVBcGkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBQb3N0T2ZmaWNlLnZzY29kZUFwaSA9IGFjcXVpcmVWc0NvZGVBcGkoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUG9zdE9mZmljZS52c2NvZGVBcGk7XG4gICAgfVxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIHRoaXMuaGFuZGxlTWVzc2FnZXMpO1xuICAgIH1cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCB0aGlzLmhhbmRsZU1lc3NhZ2VzKTtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5leHBvcnRzLlBvc3RPZmZpY2UgPSBQb3N0T2ZmaWNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9zdE9mZmljZS5qcy5tYXAiXX0=