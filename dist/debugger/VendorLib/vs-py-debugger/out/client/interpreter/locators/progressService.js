// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const inversify_1 = require("inversify");

const vscode_1 = require("vscode");

const logger_1 = require("../../common/logger");

const types_1 = require("../../common/types");

const async_1 = require("../../common/utils/async");

const misc_1 = require("../../common/utils/misc");

const types_2 = require("../../ioc/types");

const contracts_1 = require("../contracts");

let InterpreterLocatorProgressService = class InterpreterLocatorProgressService {
  constructor(serviceContainer, disposables) {
    this.disposables = disposables;
    this.deferreds = [];
    this.refreshing = new vscode_1.EventEmitter();
    this.refreshed = new vscode_1.EventEmitter();
    this.locators = [];
    this.locators = serviceContainer.getAll(contracts_1.IInterpreterLocatorService);
  }

  get onRefreshing() {
    return this.refreshing.event;
  }

  get onRefreshed() {
    return this.refreshed.event;
  }

  register() {
    this.locators.forEach(locator => {
      locator.onLocating(this.handleProgress, this, this.disposables);
    });
  }

  handleProgress(promise) {
    this.deferreds.push(async_1.createDeferredFrom(promise));
    this.notifyRefreshing();
    this.checkProgress();
  }

  notifyCompleted() {
    this.refreshed.fire();
  }

  notifyRefreshing() {
    this.refreshing.fire();
  }

  checkProgress() {
    if (this.areAllItemsCcomplete()) {
      return this.notifyCompleted();
    }

    Promise.all(this.deferreds.map(item => item.promise)).catch(misc_1.noop).then(() => this.checkProgress()).ignoreErrors();
  }

  areAllItemsCcomplete() {
    this.deferreds = this.deferreds.filter(item => !item.completed);
    return this.deferreds.length === 0;
  }

};

__decorate([logger_1.traceVerbose('Detected refreshing of Interpreters')], InterpreterLocatorProgressService.prototype, "handleProgress", null);

__decorate([logger_1.traceVerbose('All locators have completed locating')], InterpreterLocatorProgressService.prototype, "notifyCompleted", null);

__decorate([logger_1.traceVerbose('Notify locators are locating')], InterpreterLocatorProgressService.prototype, "notifyRefreshing", null);

__decorate([logger_1.traceVerbose('Checking whether locactors have completed locating')], InterpreterLocatorProgressService.prototype, "checkProgress", null);

InterpreterLocatorProgressService = __decorate([inversify_1.injectable(), __param(0, inversify_1.inject(types_2.IServiceContainer)), __param(1, inversify_1.inject(types_1.IDisposableRegistry))], InterpreterLocatorProgressService);
exports.InterpreterLocatorProgressService = InterpreterLocatorProgressService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb2dyZXNzU2VydmljZS5qcyJdLCJuYW1lcyI6WyJfX2RlY29yYXRlIiwiZGVjb3JhdG9ycyIsInRhcmdldCIsImtleSIsImRlc2MiLCJjIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiciIsIk9iamVjdCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImQiLCJSZWZsZWN0IiwiZGVjb3JhdGUiLCJpIiwiZGVmaW5lUHJvcGVydHkiLCJfX3BhcmFtIiwicGFyYW1JbmRleCIsImRlY29yYXRvciIsImV4cG9ydHMiLCJ2YWx1ZSIsImludmVyc2lmeV8xIiwicmVxdWlyZSIsInZzY29kZV8xIiwibG9nZ2VyXzEiLCJ0eXBlc18xIiwiYXN5bmNfMSIsIm1pc2NfMSIsInR5cGVzXzIiLCJjb250cmFjdHNfMSIsIkludGVycHJldGVyTG9jYXRvclByb2dyZXNzU2VydmljZSIsImNvbnN0cnVjdG9yIiwic2VydmljZUNvbnRhaW5lciIsImRpc3Bvc2FibGVzIiwiZGVmZXJyZWRzIiwicmVmcmVzaGluZyIsIkV2ZW50RW1pdHRlciIsInJlZnJlc2hlZCIsImxvY2F0b3JzIiwiZ2V0QWxsIiwiSUludGVycHJldGVyTG9jYXRvclNlcnZpY2UiLCJvblJlZnJlc2hpbmciLCJldmVudCIsIm9uUmVmcmVzaGVkIiwicmVnaXN0ZXIiLCJmb3JFYWNoIiwibG9jYXRvciIsIm9uTG9jYXRpbmciLCJoYW5kbGVQcm9ncmVzcyIsInByb21pc2UiLCJwdXNoIiwiY3JlYXRlRGVmZXJyZWRGcm9tIiwibm90aWZ5UmVmcmVzaGluZyIsImNoZWNrUHJvZ3Jlc3MiLCJub3RpZnlDb21wbGV0ZWQiLCJmaXJlIiwiYXJlQWxsSXRlbXNDY29tcGxldGUiLCJQcm9taXNlIiwiYWxsIiwibWFwIiwiaXRlbSIsImNhdGNoIiwibm9vcCIsInRoZW4iLCJpZ25vcmVFcnJvcnMiLCJmaWx0ZXIiLCJjb21wbGV0ZWQiLCJ0cmFjZVZlcmJvc2UiLCJwcm90b3R5cGUiLCJpbmplY3RhYmxlIiwiaW5q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QUFaLENBQW1CMUMsT0FBTyxDQUFDMkMsaUJBQTNCLENBQUosQ0FGb0MsRUFHM0N2RCxPQUFPLENBQUMsQ0FBRCxFQUFJSyxXQUFXLENBQUNpRCxNQUFaLENBQW1CN0MsT0FBTyxDQUFDK0MsbUJBQTNCLENBQUosQ0FIb0MsQ0FBRCxFQUkzQzFDLGlDQUoyQyxDQUE5QztBQUtBWCxPQUFPLENBQUNXLGlDQUFSLEdBQTRDQSxpQ0FBNUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbid1c2Ugc3RyaWN0JztcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBfX3BhcmFtID0gKHRoaXMgJiYgdGhpcy5fX3BhcmFtKSB8fCBmdW5jdGlvbiAocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgaW52ZXJzaWZ5XzEgPSByZXF1aXJlKFwiaW52ZXJzaWZ5XCIpO1xuY29uc3QgdnNjb2RlXzEgPSByZXF1aXJlKFwidnNjb2RlXCIpO1xuY29uc3QgbG9nZ2VyXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tbW9uL2xvZ2dlclwiKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tbW9uL3R5cGVzXCIpO1xuY29uc3QgYXN5bmNfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21tb24vdXRpbHMvYXN5bmNcIik7XG5jb25zdCBtaXNjXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tbW9uL3V0aWxzL21pc2NcIik7XG5jb25zdCB0eXBlc18yID0gcmVxdWlyZShcIi4uLy4uL2lvYy90eXBlc1wiKTtcbmNvbnN0IGNvbnRyYWN0c18xID0gcmVxdWlyZShcIi4uL2NvbnRyYWN0c1wiKTtcbmxldCBJbnRlcnByZXRlckxvY2F0b3JQcm9ncmVzc1NlcnZpY2UgPSBjbGFzcyBJbnRlcnByZXRlckxvY2F0b3JQcm9ncmVzc1NlcnZpY2Uge1xuICAgIGNvbnN0cnVjdG9yKHNlcnZpY2VDb250YWluZXIsIGRpc3Bvc2FibGVzKSB7XG4gICAgICAgIHRoaXMuZGlzcG9zYWJsZXMgPSBkaXNwb3NhYmxlcztcbiAgICAgICAgdGhpcy5kZWZlcnJlZHMgPSBbXTtcbiAgICAgICAgdGhpcy5yZWZyZXNoaW5nID0gbmV3IHZzY29kZV8xLkV2ZW50RW1pdHRlcigpO1xuICAgICAgICB0aGlzLnJlZnJlc2hlZCA9IG5ldyB2c2NvZGVfMS5FdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5sb2NhdG9ycyA9IFtdO1xuICAgICAgICB0aGlzLmxvY2F0b3JzID0gc2VydmljZUNvbnRhaW5lci5nZXRBbGwoY29udHJhY3RzXzEuSUludGVycHJldGVyTG9jYXRvclNlcnZpY2UpO1xuICAgIH1cbiAgICBnZXQgb25SZWZyZXNoaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWZyZXNoaW5nLmV2ZW50O1xuICAgIH1cbiAgICBnZXQgb25SZWZyZXNoZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlZnJlc2hlZC5ldmVudDtcbiAgICB9XG4gICAgcmVnaXN0ZXIoKSB7XG4gICAgICAgIHRoaXMubG9jYXRvcnMuZm9yRWFjaChsb2NhdG9yID0+IHtcbiAgICAgICAgICAgIGxvY2F0b3Iub25Mb2NhdGluZyh0aGlzLmhhbmRsZVByb2dyZXNzLCB0aGlzLCB0aGlzLmRpc3Bvc2FibGVzKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGhhbmRsZVByb2dyZXNzKHByb21pc2UpIHtcbiAgICAgICAgdGhpcy5kZWZlcnJlZHMucHVzaChhc3luY18xLmNyZWF0ZURlZmVycmVkRnJvbShwcm9taXNlKSk7XG4gICAgICAgIHRoaXMubm90aWZ5UmVmcmVzaGluZygpO1xuICAgICAgICB0aGlzLmNoZWNrUHJvZ3Jlc3MoKTtcbiAgICB9XG4gICAgbm90aWZ5Q29tcGxldGVkKCkge1xuICAgICAgICB0aGlzLnJlZnJlc2hlZC5maXJlKCk7XG4gICAgfVxuICAgIG5vdGlmeVJlZnJlc2hpbmcoKSB7XG4gICAgICAgIHRoaXMucmVmcmVzaGluZy5maXJlKCk7XG4gICAgfVxuICAgIGNoZWNrUHJvZ3Jlc3MoKSB7XG4gICAgICAgIGlmICh0aGlzLmFyZUFsbEl0ZW1zQ2NvbXBsZXRlKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5vdGlmeUNvbXBsZXRlZCgpO1xuICAgICAgICB9XG4gICAgICAgIFByb21pc2UuYWxsKHRoaXMuZGVmZXJyZWRzLm1hcChpdGVtID0+IGl0ZW0ucHJvbWlzZSkpXG4gICAgICAgICAgICAuY2F0Y2gobWlzY18xLm5vb3ApXG4gICAgICAgICAgICAudGhlbigoKSA9PiB0aGlzLmNoZWNrUHJvZ3Jlc3MoKSlcbiAgICAgICAgICAgIC5pZ25vcmVFcnJvcnMoKTtcbiAgICB9XG4gICAgYXJlQWxsSXRlbXNDY29tcGxldGUoKSB7XG4gICAgICAgIHRoaXMuZGVmZXJyZWRzID0gdGhpcy5kZWZlcnJlZHMuZmlsdGVyKGl0ZW0gPT4gIWl0ZW0uY29tcGxldGVkKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVmZXJyZWRzLmxlbmd0aCA9PT0gMDtcbiAgICB9XG59O1xuX19kZWNvcmF0ZShbXG4gICAgbG9nZ2VyXzEudHJhY2VWZXJib3NlKCdEZXRlY3RlZCByZWZyZXNoaW5nIG9mIEludGVycHJldGVycycpXG5dLCBJbnRlcnByZXRlckxvY2F0b3JQcm9ncmVzc1NlcnZpY2UucHJvdG90eXBlLCBcImhhbmRsZVByb2dyZXNzXCIsIG51bGwpO1xuX19kZWNvcmF0ZShbXG4gICAgbG9nZ2VyXzEudHJhY2VWZXJib3NlKCdBbGwgbG9jYXRvcnMgaGF2ZSBjb21wbGV0ZWQgbG9jYXRpbmcnKVxuXSwgSW50ZXJwcmV0ZXJMb2NhdG9yUHJvZ3Jlc3NTZXJ2aWNlLnByb3RvdHlwZSwgXCJub3RpZnlDb21wbGV0ZWRcIiwgbnVsbCk7XG5fX2RlY29yYXRlKFtcbiAgICBsb2dnZXJfMS50cmFjZVZlcmJvc2UoJ05vdGlmeSBsb2NhdG9ycyBhcmUgbG9jYXRpbmcnKVxuXSwgSW50ZXJwcmV0ZXJMb2NhdG9yUHJvZ3Jlc3NTZXJ2aWNlLnByb3RvdHlwZSwgXCJub3RpZnlSZWZyZXNoaW5nXCIsIG51bGwpO1xuX19kZWNvcmF0ZShbXG4gICAgbG9nZ2VyXzEudHJhY2VWZXJib3NlKCdDaGVja2luZyB3aGV0aGVyIGxvY2FjdG9ycyBoYXZlIGNvbXBsZXRlZCBsb2NhdGluZycpXG5dLCBJbnRlcnByZXRlckxvY2F0b3JQcm9ncmVzc1NlcnZpY2UucHJvdG90eXBlLCBcImNoZWNrUHJvZ3Jlc3NcIiwgbnVsbCk7XG5JbnRlcnByZXRlckxvY2F0b3JQcm9ncmVzc1NlcnZpY2UgPSBfX2RlY29yYXRlKFtcbiAgICBpbnZlcnNpZnlfMS5pbmplY3RhYmxlKCksXG4gICAgX19wYXJhbSgwLCBpbnZlcnNpZnlfMS5pbmplY3QodHlwZXNfMi5JU2VydmljZUNvbnRhaW5lcikpLFxuICAgIF9fcGFyYW0oMSwgaW52ZXJzaWZ5XzEuaW5qZWN0KHR5cGVzXzEuSURpc3Bvc2FibGVSZWdpc3RyeSkpXG5dLCBJbnRlcnByZXRlckxvY2F0b3JQcm9ncmVzc1NlcnZpY2UpO1xuZXhwb3J0cy5JbnRlcnByZXRlckxvY2F0b3JQcm9ncmVzc1NlcnZpY2UgPSBJbnRlcnByZXRlckxvY2F0b3JQcm9ncmVzc1NlcnZpY2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9ncmVzc1NlcnZpY2UuanMubWFwIl19