// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

function sleep(timeout) {
  return __awaiter(this, void 0, void 0, function* () {
    return new Promise(resolve => {
      setTimeout(resolve, timeout);
    });
  });
}

exports.sleep = sleep;

class DeferredImpl {
  // tslint:disable-next-line:no-any
  constructor(scope = null) {
    this.scope = scope;
    this._resolved = false;
    this._rejected = false; // tslint:disable-next-line:promise-must-complete

    this._promise = new Promise((res, rej) => {
      this._resolve = res;
      this._reject = rej;
    });
  }

  resolve(value) {
    this._resolve.apply(this.scope ? this.scope : this, arguments);

    this._resolved = true;
  } // tslint:disable-next-line:no-any


  reject(reason) {
    this._reject.apply(this.scope ? this.scope : this, arguments);

    this._rejected = true;
  }

  get promise() {
    return this._promise;
  }

  get resolved() {
    return this._resolved;
  }

  get rejected() {
    return this._rejected;
  }

  get completed() {
    return this._rejected || this._resolved;
  }

} // tslint:disable-next-line:no-any


function createDeferred(scope = null) {
  return new DeferredImpl(scope);
}

exports.createDeferred = createDeferred;

function createDeferredFrom(...promises) {
  const deferred = createDeferred();
  Promise.all(promises).then(deferred.resolve.bind(deferred)).catch(deferred.reject.bind(deferred));
  return deferred;
}

exports.createDeferredFrom = createDeferredFrom;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jLmpzIl0sIm5hbWVzIjpbIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwidmFsdWUiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJzbGVlcCIsInRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiRGVmZXJyZWRJbXBsIiwiY29uc3RydWN0b3IiLCJzY29wZSIsIl9yZXNvbHZlZCIsIl9yZWplY3RlZCIsIl9wcm9taXNlIiwicmVzIiwicmVqIiwiX3Jlc29sdmUiLCJfcmVqZWN0IiwiYXJndW1lbnRzIiwicmVhc29uIiwicHJvbWlzZSIsInJlc29sdmVkIiwiY29tcGxldGVkIiwiY3JlYXRlRGVmZXJyZWQiLCJjcmVhdGVEZWZlcnJlZEZyb20iLCJwcm9taXNlcyIsImRlZmVycmVkIiwiYWxsIiwiYmluZCIsImNhdGNoIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0EsSUFBSUEsU0FBUyxHQUFJLFVBQVEsU0FBS0EsU0FBZCxJQUE0QixVQUFVQyxPQUFWLEVBQW1CQyxVQUFuQixFQUErQkMsQ0FBL0IsRUFBa0NDLFNBQWxDLEVBQTZDO0FBQ3JGLFNBQU8sS0FBS0QsQ0FBQyxLQUFLQSxDQUFDLEdBQUdFLE9BQVQsQ0FBTixFQUF5QixVQUFVQyxPQUFWLEVBQW1CQyxNQUFuQixFQUEyQjtBQUN2RCxhQUFTQyxTQUFULENBQW1CQyxLQUFuQixFQUEwQjtBQUFFLFVBQUk7QUFBRUMsUUFBQUEsSUFBSSxDQUFDTixTQUFTLENBQUNPLElBQVYsQ0FBZUYsS0FBZixDQUFELENBQUo7QUFBOEIsT0FBcEMsQ0FBcUMsT0FBT0csQ0FBUCxFQUFVO0FBQUVMLFFBQUFBLE1BQU0sQ0FBQ0ssQ0FBRCxDQUFOO0FB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Q0FrQ25COzs7QUFDQSxTQUFTWSxjQUFULENBQXdCYixLQUFLLEdBQUcsSUFBaEMsRUFBc0M7QUFDbEMsU0FBTyxJQUFJRixZQUFKLENBQWlCRSxLQUFqQixDQUFQO0FBQ0g7O0FBQ0ROLE9BQU8sQ0FBQ21CLGNBQVIsR0FBeUJBLGNBQXpCOztBQUNBLFNBQVNDLGtCQUFULENBQTRCLEdBQUdDLFFBQS9CLEVBQXlDO0FBQ3JDLFFBQU1DLFFBQVEsR0FBR0gsY0FBYyxFQUEvQjtBQUNBbEMsRUFBQUEsT0FBTyxDQUFDc0MsR0FBUixDQUFZRixRQUFaLEVBQ0t6QixJQURMLENBQ1UwQixRQUFRLENBQUNwQyxPQUFULENBQWlCc0MsSUFBakIsQ0FBc0JGLFFBQXRCLENBRFYsRUFFS0csS0FGTCxDQUVXSCxRQUFRLENBQUNuQyxNQUFULENBQWdCcUMsSUFBaEIsQ0FBcUJGLFFBQXJCLENBRlg7QUFHQSxTQUFPQSxRQUFQO0FBQ0g7O0FBQ0R0QixPQUFPLENBQUNvQixrQkFBUixHQUE2QkEsa0JBQTdCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4ndXNlIHN0cmljdCc7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIHNsZWVwKHRpbWVvdXQpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQocmVzb2x2ZSwgdGltZW91dCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZXhwb3J0cy5zbGVlcCA9IHNsZWVwO1xuY2xhc3MgRGVmZXJyZWRJbXBsIHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG4gICAgY29uc3RydWN0b3Ioc2NvcGUgPSBudWxsKSB7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5fcmVzb2x2ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcmVqZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnByb21pc2UtbXVzdC1jb21wbGV0ZVxuICAgICAgICB0aGlzLl9wcm9taXNlID0gbmV3IFByb21pc2UoKHJlcywgcmVqKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9yZXNvbHZlID0gcmVzO1xuICAgICAgICAgICAgdGhpcy5fcmVqZWN0ID0gcmVqO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmVzb2x2ZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9yZXNvbHZlLmFwcGx5KHRoaXMuc2NvcGUgPyB0aGlzLnNjb3BlIDogdGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5fcmVzb2x2ZWQgPSB0cnVlO1xuICAgIH1cbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG4gICAgcmVqZWN0KHJlYXNvbikge1xuICAgICAgICB0aGlzLl9yZWplY3QuYXBwbHkodGhpcy5zY29wZSA/IHRoaXMuc2NvcGUgOiB0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB0aGlzLl9yZWplY3RlZCA9IHRydWU7XG4gICAgfVxuICAgIGdldCBwcm9taXNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJvbWlzZTtcbiAgICB9XG4gICAgZ2V0IHJlc29sdmVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVzb2x2ZWQ7XG4gICAgfVxuICAgIGdldCByZWplY3RlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlamVjdGVkO1xuICAgIH1cbiAgICBnZXQgY29tcGxldGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVqZWN0ZWQgfHwgdGhpcy5fcmVzb2x2ZWQ7XG4gICAgfVxufVxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuZnVuY3Rpb24gY3JlYXRlRGVmZXJyZWQoc2NvcGUgPSBudWxsKSB7XG4gICAgcmV0dXJuIG5ldyBEZWZlcnJlZEltcGwoc2NvcGUpO1xufVxuZXhwb3J0cy5jcmVhdGVEZWZlcnJlZCA9IGNyZWF0ZURlZmVycmVkO1xuZnVuY3Rpb24gY3JlYXRlRGVmZXJyZWRGcm9tKC4uLnByb21pc2VzKSB7XG4gICAgY29uc3QgZGVmZXJyZWQgPSBjcmVhdGVEZWZlcnJlZCgpO1xuICAgIFByb21pc2UuYWxsKHByb21pc2VzKVxuICAgICAgICAudGhlbihkZWZlcnJlZC5yZXNvbHZlLmJpbmQoZGVmZXJyZWQpKVxuICAgICAgICAuY2F0Y2goZGVmZXJyZWQucmVqZWN0LmJpbmQoZGVmZXJyZWQpKTtcbiAgICByZXR1cm4gZGVmZXJyZWQ7XG59XG5leHBvcnRzLmNyZWF0ZURlZmVycmVkRnJvbSA9IGNyZWF0ZURlZmVycmVkRnJvbTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFzeW5jLmpzLm1hcCJdfQ==