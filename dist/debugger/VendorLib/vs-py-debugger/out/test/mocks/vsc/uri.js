/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var vscUri;

(function (vscUri) {
  const platform = {
    isWindows: /^win/.test(process.platform)
  }; // tslint:disable:all

  function _encode(ch) {
    return '%' + ch.charCodeAt(0).toString(16).toUpperCase();
  } // see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent


  function encodeURIComponent2(str) {
    return encodeURIComponent(str).replace(/[!'()*]/g, _encode);
  }

  function encodeNoop(str) {
    return str.replace(/[#?]/, _encode);
  }

  const _schemePattern = /^\w[\w\d+.-]*$/;
  const _singleSlashStart = /^\//;
  const _doubleSlashStart = /^\/\//;

  function _validateUri(ret) {
    // scheme, https://tools.ietf.org/html/rfc3986#section-3.1
    // ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )
    if (ret.scheme && !_schemePattern.test(ret.scheme)) {
      throw new Error('[UriError]: Scheme contains illegal characters.');
    } // path, http://tools.ietf.org/html/rfc3986#section-3.3
    // If a URI contains an authority component, then the path component
    // must either be empty or begin with a slash ("/") character.  If a URI
    // does not contain an authority component, then the path cannot begin
    // with two slash characters ("//").


    if (ret.path) {
      if (ret.authority) {
        if (!_singleSlashStart.test(ret.path)) {
          throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character');
        }
      } else {
        if (_doubleSlashStart.test(ret.path)) {
          throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")');
        }
      }
    }
  }

  const _empty = '';
  const _slash = '/';
  const _regexp = /^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/;
  const _driveLetterPath = /^\/[a-zA-Z]:/;
  const _upperCaseDrive = /^(\/)?([A-Z]:)/;
  const _driveLetter = /^[a-zA-Z]:/;
  /**
   * Uniform Resource Identifier (URI) http://tools.ietf.org/html/rfc3986.
   * This class is a simple parser which creates the basic component paths
   * (http://tools.ietf.org/html/rfc3986#section-3) with minimal validation
   * and encoding.
   *
   *       foo://example.com:8042/over/there?name=ferret#nose
   *       \_/   \______________/\_________/ \_________/ \__/
   *        |           |            |            |        |
   *     scheme     authority       path        query   fragment
   *        |   _____________________|__
   *       / \ /                        \
   *       urn:example:animal:ferret:nose
   *
   *
   */

  class URI {
    /**
     * @internal
     */
    constructor(schemeOrData, authority, path, query, fragment) {
      if (typeof schemeOrData === 'object') {
        this.scheme = schemeOrData.scheme || _empty;
        this.authority = schemeOrData.authority || _empty;
        this.path = schemeOrData.path || _empty;
        this.query = schemeOrData.query || _empty;
        this.fragment = schemeOrData.fragment || _empty; // no validation because it's this URI
        // that creates uri components.
        // _validateUri(this);
      } else {
        this.scheme = schemeOrData || _empty;
        this.authority = authority || _empty;
        this.path = path || _empty;
        this.query = query || _empty;
        this.fragment = fragment || _empty;

        _validateUri(this);
      }
    }

    static isUri(thing) {
      if (thing instanceof URI) {
        return true;
      }

      if (!thing) {
        return false;
      }

      return typeof thing.authority === 'string' && typeof thing.fragment === 'string' && typeof thing.path === 'string' && typeof thing.query === 'string' && typeof thing.scheme === 'string';
    } // ---- filesystem path -----------------------

    /**
     * Returns a string representing the corresponding file system path of this URI.
     * Will handle UNC paths and normalize windows drive letters to lower-case. Also
     * uses the platform specific path separator. Will *not* validate the path for
     * invalid characters and semantics. Will *not* look at the scheme of this URI.
     */


    get fsPath() {
      return _makeFsPath(this);
    } // ---- modify to new -------------------------


    with(change) {
      if (!change) {
        return this;
      }

      let {
        scheme,
        authority,
        path,
        query,
        fragment
      } = change;

      if (scheme === void 0) {
        scheme = this.scheme;
      } else if (scheme === null) {
        scheme = _empty;
      }

      if (authority === void 0) {
        authority = this.authority;
      } else if (authority === null) {
        authority = _empty;
      }

      if (path === void 0) {
        path = this.path;
      } else if (path === null) {
        path = _empty;
      }

      if (query === void 0) {
        query = this.query;
      } else if (query === null) {
        query = _empty;
      }

      if (fragment === void 0) {
        fragment = this.fragment;
      } else if (fragment === null) {
        fragment = _empty;
      }

      if (scheme === this.scheme && authority === this.authority && path === this.path && query === this.query && fragment === this.fragment) {
        return this;
      }

      return new _URI(scheme, authority, path, query, fragment);
    } // ---- parse & validate ------------------------


    static parse(value) {
      const match = _regexp.exec(value);

      if (!match) {
        return new _URI(_empty, _empty, _empty, _empty, _empty);
      }

      return new _URI(match[2] || _empty, decodeURIComponent(match[4] || _empty), decodeURIComponent(match[5] || _empty), decodeURIComponent(match[7] || _empty), decodeURIComponent(match[9] || _empty));
    }

    static file(path) {
      let authority = _empty; // normalize to fwd-slashes on windows,
      // on other systems bwd-slashes are valid
      // filename character, eg /f\oo/ba\r.txt

      if (platform.isWindows) {
        path = path.replace(/\\/g, _slash);
      } // check for authority as used in UNC shares
      // or use the path as given


      if (path[0] === _slash && path[1] === _slash) {
        let idx = path.indexOf(_slash, 2);

        if (idx === -1) {
          authority = path.substring(2);
          path = _slash;
        } else {
          authority = path.substring(2, idx);
          path = path.substring(idx) || _slash;
        }
      } // Ensure that path starts with a slash
      // or that it is at least a slash


      if (_driveLetter.test(path)) {
        path = _slash + path;
      } else if (path[0] !== _slash) {
        // tricky -> makes invalid paths
        // but otherwise we have to stop
        // allowing relative paths...
        path = _slash + path;
      }

      return new _URI('file', authority, path, _empty, _empty);
    }

    static from(components) {
      return new _URI(components.scheme, components.authority, components.path, components.query, components.fragment);
    } // ---- printing/externalize ---------------------------

    /**
     *
     * @param skipEncoding Do not encode the result, default is `false`
     */


    toString(skipEncoding = false) {
      return _asFormatted(this, skipEncoding);
    }

    toJSON() {
      const res = {
        $mid: 1,
        fsPath: this.fsPath,
        external: this.toString()
      };

      if (this.path) {
        res.path = this.path;
      }

      if (this.scheme) {
        res.scheme = this.scheme;
      }

      if (this.authority) {
        res.authority = this.authority;
      }

      if (this.query) {
        res.query = this.query;
      }

      if (this.fragment) {
        res.fragment = this.fragment;
      }

      return res;
    }

    static revive(data) {
      if (!data) {
        return data;
      } else if (data instanceof URI) {
        return data;
      } else {
        let result = new _URI(data);
        result._fsPath = data.fsPath;
        result._formatted = data.external;
        return result;
      }
    }

  }

  vscUri.URI = URI; // tslint:disable-next-line:class-name

  class _URI extends URI {
    constructor() {
      super(...arguments);
      this._formatted = null;
      this._fsPath = null;
    }

    get fsPath() {
      if (!this._fsPath) {
        this._fsPath = _makeFsPath(this);
      }

      return this._fsPath;
    }

    toString(skipEncoding = false) {
      if (!skipEncoding) {
        if (!this._formatted) {
          this._formatted = _asFormatted(this, false);
        }

        return this._formatted;
      } else {
        // we don't cache that
        return _asFormatted(this, true);
      }
    }

  }
  /**
   * Compute `fsPath` for the given uri
   * @param uri
   */


  function _makeFsPath(uri) {
    let value;

    if (uri.authority && uri.path && uri.scheme === 'file') {
      // unc path: file://shares/c$/far/boo
      value = `//${uri.authority}${uri.path}`;
    } else if (_driveLetterPath.test(uri.path)) {
      // windows drive letter: file:///c:/far/boo
      value = uri.path[1].toLowerCase() + uri.path.substr(2);
    } else {
      // other path
      value = uri.path;
    }

    if (platform.isWindows) {
      value = value.replace(/\//g, '\\');
    }

    return value;
  }
  /**
   * Create the external version of a uri
   */


  function _asFormatted(uri, skipEncoding) {
    const encoder = !skipEncoding ? encodeURIComponent2 : encodeNoop;
    const parts = [];
    let {
      scheme,
      authority,
      path,
      query,
      fragment
    } = uri;

    if (scheme) {
      parts.push(scheme, ':');
    }

    if (authority || scheme === 'file') {
      parts.push('//');
    }

    if (authority) {
      let idx = authority.indexOf('@');

      if (idx !== -1) {
        const userinfo = authority.substr(0, idx);
        authority = authority.substr(idx + 1);
        idx = userinfo.indexOf(':');

        if (idx === -1) {
          parts.push(encoder(userinfo));
        } else {
          parts.push(encoder(userinfo.substr(0, idx)), ':', encoder(userinfo.substr(idx + 1)));
        }

        parts.push('@');
      }

      authority = authority.toLowerCase();
      idx = authority.indexOf(':');

      if (idx === -1) {
        parts.push(encoder(authority));
      } else {
        parts.push(encoder(authority.substr(0, idx)), authority.substr(idx));
      }
    }

    if (path) {
      // lower-case windows drive letters in /C:/fff or C:/fff
      const m = _upperCaseDrive.exec(path);

      if (m) {
        if (m[1]) {
          path = '/' + m[2].toLowerCase() + path.substr(3); // "/c:".length === 3
        } else {
          path = m[2].toLowerCase() + path.substr(2); // // "c:".length === 2
        }
      } // encode every segement but not slashes
      // make sure that # and ? are always encoded
      // when occurring in paths - otherwise the result
      // cannot be parsed back again


      let lastIdx = 0;

      while (true) {
        let idx = path.indexOf(_slash, lastIdx);

        if (idx === -1) {
          parts.push(encoder(path.substring(lastIdx)));
          break;
        }

        parts.push(encoder(path.substring(lastIdx, idx)), _slash);
        lastIdx = idx + 1;
      }
    }

    if (query) {
      parts.push('?', encoder(query));
    }

    if (fragment) {
      parts.push('#', encoder(fragment));
    }

    return parts.join(_empty);
  }
})(vscUri = exports.vscUri || (exports.vscUri = {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVyaS5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInZzY1VyaSIsInBsYXRmb3JtIiwiaXNXaW5kb3dzIiwidGVzdCIsInByb2Nlc3MiLCJfZW5jb2RlIiwiY2giLCJjaGFyQ29kZUF0IiwidG9TdHJpbmciLCJ0b1VwcGVyQ2FzZSIsImVuY29kZVVSSUNvbXBvbmVudDIiLCJzdHIiLCJlbmNvZGVVUklDb21wb25lbnQiLCJyZXBsYWNlIiwiZW5jb2RlTm9vcCIsIl9zY2hlbWVQYXR0ZXJuIiwiX3NpbmdsZVNsYXNoU3RhcnQiLCJfZG91YmxlU2xhc2hTdGFydCIsIl92YWxpZGF0ZVVyaSIsInJldCIsInNjaGVtZSIsIkVycm9yIiwicGF0aCIsImF1dGhvcml0eSIsIl9lbXB0eSIsIl9zbGFzaCIsIl9yZWdleHAiLCJfZHJpdmVMZXR0ZXJQYXRoIiwiX3VwcGVyQ2FzZURyaXZlIiwiX2RyaXZlTGV0dGVyIiwiVVJJIiwiY29uc3RydWN0b3IiLCJzY2hlbWVPckRhdGEiLCJxdWVyeSIsImZyYWdtZW50IiwiaXNVcmkiLCJ0aGluZyIsImZzUGF0aCIsIl9tYWtlRnNQYXRoIiwid2l0aCIsImNoYW5nZSIsIl9VUkkiLCJwYXJzZSIsIm1hdGNoIiwiZXhlYyIsImRlY29kZVVSSUNvbXBvbmVudCIsImZpbGUiLCJpZHgiLCJpbmRleE9mIiwic3Vic3RyaW5nIiwiZnJvbSIsImNvbXBvbmVudHMiLCJza2lwRW5jb2RpbmciLCJfYXNGb3JtYXR0ZWQiLCJ0b0pTT04iLCJyZXMiLCIkbWlkIiwiZXh0ZXJuYWwiLCJyZXZpdmUiLCJkYXRhIiwicmVzdWx0IiwiX2ZzUGF0aCIsIl9mb3JtYXR0ZWQiLCJhcmd1bWVudHMiLCJ1cmkiLCJ0b0xvd2VyQ2FzZSIsInN1YnN0ciIsImVuY29kZXIiLCJwYXJ0cyIsInB1c2giLCJ1c2VyaW5mbyIsIm0iLCJsYXN0SWR4Iiwiam9pbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFD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QUFDLENBQWIsRUFBZ0I7QUFDWnFCLFVBQUFBLEtBQUssQ0FBQ0MsSUFBTixDQUFXRixPQUFPLENBQUM3QyxJQUFJLENBQUMyQixTQUFMLENBQWV1QixPQUFmLENBQUQsQ0FBbEI7QUFDQTtBQUNIOztBQUNESixRQUFBQSxLQUFLLENBQUNDLElBQU4sQ0FBV0YsT0FBTyxDQUFDN0MsSUFBSSxDQUFDMkIsU0FBTCxDQUFldUIsT0FBZixFQUF3QnpCLEdBQXhCLENBQUQsQ0FBbEIsRUFBa0R0QixNQUFsRDtBQUNBK0MsUUFBQUEsT0FBTyxHQUFHekIsR0FBRyxHQUFHLENBQWhCO0FBQ0g7QUFDSjs7QUFDRCxRQUFJZCxLQUFKLEVBQVc7QUFDUG1DLE1BQUFBLEtBQUssQ0FBQ0MsSUFBTixDQUFXLEdBQVgsRUFBZ0JGLE9BQU8sQ0FBQ2xDLEtBQUQsQ0FBdkI7QUFDSDs7QUFDRCxRQUFJQyxRQUFKLEVBQWM7QUFDVmtDLE1BQUFBLEtBQUssQ0FBQ0MsSUFBTixDQUFXLEdBQVgsRUFBZ0JGLE9BQU8sQ0FBQ2pDLFFBQUQsQ0FBdkI7QUFDSDs7QUFDRCxXQUFPa0MsS0FBSyxDQUFDSyxJQUFOLENBQVdqRCxNQUFYLENBQVA7QUFDSDtBQUNKLENBalhELEVBaVhHeEIsTUFBTSxHQUFHRixPQUFPLENBQUNFLE1BQVIsS0FBbUJGLE9BQU8sQ0FBQ0UsTUFBUixHQUFpQixFQUFwQyxDQWpYWiIsInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuJ3VzZSBzdHJpY3QnO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHZzY1VyaTtcbihmdW5jdGlvbiAodnNjVXJpKSB7XG4gICAgY29uc3QgcGxhdGZvcm0gPSB7XG4gICAgICAgIGlzV2luZG93czogL153aW4vLnRlc3QocHJvY2Vzcy5wbGF0Zm9ybSlcbiAgICB9O1xuICAgIC8vIHRzbGludDpkaXNhYmxlOmFsbFxuICAgIGZ1bmN0aW9uIF9lbmNvZGUoY2gpIHtcbiAgICAgICAgcmV0dXJuICclJyArIGNoLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG4gICAgfVxuICAgIC8vIHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9lbmNvZGVVUklDb21wb25lbnRcbiAgICBmdW5jdGlvbiBlbmNvZGVVUklDb21wb25lbnQyKHN0cikge1xuICAgICAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cikucmVwbGFjZSgvWyEnKCkqXS9nLCBfZW5jb2RlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZW5jb2RlTm9vcChzdHIpIHtcbiAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9bIz9dLywgX2VuY29kZSk7XG4gICAgfVxuICAgIGNvbnN0IF9zY2hlbWVQYXR0ZXJuID0gL15cXHdbXFx3XFxkKy4tXSokLztcbiAgICBjb25zdCBfc2luZ2xlU2xhc2hTdGFydCA9IC9eXFwvLztcbiAgICBjb25zdCBfZG91YmxlU2xhc2hTdGFydCA9IC9eXFwvXFwvLztcbiAgICBmdW5jdGlvbiBfdmFsaWRhdGVVcmkocmV0KSB7XG4gICAgICAgIC8vIHNjaGVtZSwgaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODYjc2VjdGlvbi0zLjFcbiAgICAgICAgLy8gQUxQSEEgKiggQUxQSEEgLyBESUdJVCAvIFwiK1wiIC8gXCItXCIgLyBcIi5cIiApXG4gICAgICAgIGlmIChyZXQuc2NoZW1lICYmICFfc2NoZW1lUGF0dGVybi50ZXN0KHJldC5zY2hlbWUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tVcmlFcnJvcl06IFNjaGVtZSBjb250YWlucyBpbGxlZ2FsIGNoYXJhY3RlcnMuJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcGF0aCwgaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NiNzZWN0aW9uLTMuM1xuICAgICAgICAvLyBJZiBhIFVSSSBjb250YWlucyBhbiBhdXRob3JpdHkgY29tcG9uZW50LCB0aGVuIHRoZSBwYXRoIGNvbXBvbmVudFxuICAgICAgICAvLyBtdXN0IGVpdGhlciBiZSBlbXB0eSBvciBiZWdpbiB3aXRoIGEgc2xhc2ggKFwiL1wiKSBjaGFyYWN0ZXIuICBJZiBhIFVSSVxuICAgICAgICAvLyBkb2VzIG5vdCBjb250YWluIGFuIGF1dGhvcml0eSBjb21wb25lbnQsIHRoZW4gdGhlIHBhdGggY2Fubm90IGJlZ2luXG4gICAgICAgIC8vIHdpdGggdHdvIHNsYXNoIGNoYXJhY3RlcnMgKFwiLy9cIikuXG4gICAgICAgIGlmIChyZXQucGF0aCkge1xuICAgICAgICAgICAgaWYgKHJldC5hdXRob3JpdHkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIV9zaW5nbGVTbGFzaFN0YXJ0LnRlc3QocmV0LnBhdGgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignW1VyaUVycm9yXTogSWYgYSBVUkkgY29udGFpbnMgYW4gYXV0aG9yaXR5IGNvbXBvbmVudCwgdGhlbiB0aGUgcGF0aCBjb21wb25lbnQgbXVzdCBlaXRoZXIgYmUgZW1wdHkgb3IgYmVnaW4gd2l0aCBhIHNsYXNoIChcIi9cIikgY2hhcmFjdGVyJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKF9kb3VibGVTbGFzaFN0YXJ0LnRlc3QocmV0LnBhdGgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignW1VyaUVycm9yXTogSWYgYSBVUkkgZG9lcyBub3QgY29udGFpbiBhbiBhdXRob3JpdHkgY29tcG9uZW50LCB0aGVuIHRoZSBwYXRoIGNhbm5vdCBiZWdpbiB3aXRoIHR3byBzbGFzaCBjaGFyYWN0ZXJzIChcIi8vXCIpJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IF9lbXB0eSA9ICcnO1xuICAgIGNvbnN0IF9zbGFzaCA9ICcvJztcbiAgICBjb25zdCBfcmVnZXhwID0gL14oKFteOi8/I10rPyk6KT8oXFwvXFwvKFteLz8jXSopKT8oW14/I10qKShcXD8oW14jXSopKT8oIyguKikpPy87XG4gICAgY29uc3QgX2RyaXZlTGV0dGVyUGF0aCA9IC9eXFwvW2EtekEtWl06LztcbiAgICBjb25zdCBfdXBwZXJDYXNlRHJpdmUgPSAvXihcXC8pPyhbQS1aXTopLztcbiAgICBjb25zdCBfZHJpdmVMZXR0ZXIgPSAvXlthLXpBLVpdOi87XG4gICAgLyoqXG4gICAgICogVW5pZm9ybSBSZXNvdXJjZSBJZGVudGlmaWVyIChVUkkpIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODYuXG4gICAgICogVGhpcyBjbGFzcyBpcyBhIHNpbXBsZSBwYXJzZXIgd2hpY2ggY3JlYXRlcyB0aGUgYmFzaWMgY29tcG9uZW50IHBhdGhzXG4gICAgICogKGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODYjc2VjdGlvbi0zKSB3aXRoIG1pbmltYWwgdmFsaWRhdGlvblxuICAgICAqIGFuZCBlbmNvZGluZy5cbiAgICAgKlxuICAgICAqICAgICAgIGZvbzovL2V4YW1wbGUuY29tOjgwNDIvb3Zlci90aGVyZT9uYW1lPWZlcnJldCNub3NlXG4gICAgICogICAgICAgXFxfLyAgIFxcX19fX19fX19fX19fX18vXFxfX19fX19fX18vIFxcX19fX19fX19fLyBcXF9fL1xuICAgICAqICAgICAgICB8ICAgICAgICAgICB8ICAgICAgICAgICAgfCAgICAgICAgICAgIHwgICAgICAgIHxcbiAgICAgKiAgICAgc2NoZW1lICAgICBhdXRob3JpdHkgICAgICAgcGF0aCAgICAgICAgcXVlcnkgICBmcmFnbWVudFxuICAgICAqICAgICAgICB8ICAgX19fX19fX19fX19fX19fX19fX19ffF9fXG4gICAgICogICAgICAgLyBcXCAvICAgICAgICAgICAgICAgICAgICAgICAgXFxcbiAgICAgKiAgICAgICB1cm46ZXhhbXBsZTphbmltYWw6ZmVycmV0Om5vc2VcbiAgICAgKlxuICAgICAqXG4gICAgICovXG4gICAgY2xhc3MgVVJJIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3RydWN0b3Ioc2NoZW1lT3JEYXRhLCBhdXRob3JpdHksIHBhdGgsIHF1ZXJ5LCBmcmFnbWVudCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWVPckRhdGEgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zY2hlbWUgPSBzY2hlbWVPckRhdGEuc2NoZW1lIHx8IF9lbXB0eTtcbiAgICAgICAgICAgICAgICB0aGlzLmF1dGhvcml0eSA9IHNjaGVtZU9yRGF0YS5hdXRob3JpdHkgfHwgX2VtcHR5O1xuICAgICAgICAgICAgICAgIHRoaXMucGF0aCA9IHNjaGVtZU9yRGF0YS5wYXRoIHx8IF9lbXB0eTtcbiAgICAgICAgICAgICAgICB0aGlzLnF1ZXJ5ID0gc2NoZW1lT3JEYXRhLnF1ZXJ5IHx8IF9lbXB0eTtcbiAgICAgICAgICAgICAgICB0aGlzLmZyYWdtZW50ID0gc2NoZW1lT3JEYXRhLmZyYWdtZW50IHx8IF9lbXB0eTtcbiAgICAgICAgICAgICAgICAvLyBubyB2YWxpZGF0aW9uIGJlY2F1c2UgaXQncyB0aGlzIFVSSVxuICAgICAgICAgICAgICAgIC8vIHRoYXQgY3JlYXRlcyB1cmkgY29tcG9uZW50cy5cbiAgICAgICAgICAgICAgICAvLyBfdmFsaWRhdGVVcmkodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNjaGVtZSA9IHNjaGVtZU9yRGF0YSB8fCBfZW1wdHk7XG4gICAgICAgICAgICAgICAgdGhpcy5hdXRob3JpdHkgPSBhdXRob3JpdHkgfHwgX2VtcHR5O1xuICAgICAgICAgICAgICAgIHRoaXMucGF0aCA9IHBhdGggfHwgX2VtcHR5O1xuICAgICAgICAgICAgICAgIHRoaXMucXVlcnkgPSBxdWVyeSB8fCBfZW1wdHk7XG4gICAgICAgICAgICAgICAgdGhpcy5mcmFnbWVudCA9IGZyYWdtZW50IHx8IF9lbXB0eTtcbiAgICAgICAgICAgICAgICBfdmFsaWRhdGVVcmkodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGljIGlzVXJpKHRoaW5nKSB7XG4gICAgICAgICAgICBpZiAodGhpbmcgaW5zdGFuY2VvZiBVUkkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpbmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIHRoaW5nLmF1dGhvcml0eSA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICAmJiB0eXBlb2YgdGhpbmcuZnJhZ21lbnQgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgJiYgdHlwZW9mIHRoaW5nLnBhdGggPT09ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgJiYgdHlwZW9mIHRoaW5nLnF1ZXJ5ID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgICYmIHR5cGVvZiB0aGluZy5zY2hlbWUgPT09ICdzdHJpbmcnO1xuICAgICAgICB9XG4gICAgICAgIC8vIC0tLS0gZmlsZXN5c3RlbSBwYXRoIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgY29ycmVzcG9uZGluZyBmaWxlIHN5c3RlbSBwYXRoIG9mIHRoaXMgVVJJLlxuICAgICAgICAgKiBXaWxsIGhhbmRsZSBVTkMgcGF0aHMgYW5kIG5vcm1hbGl6ZSB3aW5kb3dzIGRyaXZlIGxldHRlcnMgdG8gbG93ZXItY2FzZS4gQWxzb1xuICAgICAgICAgKiB1c2VzIHRoZSBwbGF0Zm9ybSBzcGVjaWZpYyBwYXRoIHNlcGFyYXRvci4gV2lsbCAqbm90KiB2YWxpZGF0ZSB0aGUgcGF0aCBmb3JcbiAgICAgICAgICogaW52YWxpZCBjaGFyYWN0ZXJzIGFuZCBzZW1hbnRpY3MuIFdpbGwgKm5vdCogbG9vayBhdCB0aGUgc2NoZW1lIG9mIHRoaXMgVVJJLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0IGZzUGF0aCgpIHtcbiAgICAgICAgICAgIHJldHVybiBfbWFrZUZzUGF0aCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICAvLyAtLS0tIG1vZGlmeSB0byBuZXcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICB3aXRoKGNoYW5nZSkge1xuICAgICAgICAgICAgaWYgKCFjaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCB7IHNjaGVtZSwgYXV0aG9yaXR5LCBwYXRoLCBxdWVyeSwgZnJhZ21lbnQgfSA9IGNoYW5nZTtcbiAgICAgICAgICAgIGlmIChzY2hlbWUgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICAgIHNjaGVtZSA9IHRoaXMuc2NoZW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc2NoZW1lID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgc2NoZW1lID0gX2VtcHR5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGF1dGhvcml0eSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgYXV0aG9yaXR5ID0gdGhpcy5hdXRob3JpdHk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhdXRob3JpdHkgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBhdXRob3JpdHkgPSBfZW1wdHk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgcGF0aCA9IHRoaXMucGF0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHBhdGggPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBwYXRoID0gX2VtcHR5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHF1ZXJ5ID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICBxdWVyeSA9IHRoaXMucXVlcnk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChxdWVyeSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHF1ZXJ5ID0gX2VtcHR5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZyYWdtZW50ID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICBmcmFnbWVudCA9IHRoaXMuZnJhZ21lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChmcmFnbWVudCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGZyYWdtZW50ID0gX2VtcHR5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNjaGVtZSA9PT0gdGhpcy5zY2hlbWVcbiAgICAgICAgICAgICAgICAmJiBhdXRob3JpdHkgPT09IHRoaXMuYXV0aG9yaXR5XG4gICAgICAgICAgICAgICAgJiYgcGF0aCA9PT0gdGhpcy5wYXRoXG4gICAgICAgICAgICAgICAgJiYgcXVlcnkgPT09IHRoaXMucXVlcnlcbiAgICAgICAgICAgICAgICAmJiBmcmFnbWVudCA9PT0gdGhpcy5mcmFnbWVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBfVVJJKHNjaGVtZSwgYXV0aG9yaXR5LCBwYXRoLCBxdWVyeSwgZnJhZ21lbnQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIC0tLS0gcGFyc2UgJiB2YWxpZGF0ZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgc3RhdGljIHBhcnNlKHZhbHVlKSB7XG4gICAgICAgICAgICBjb25zdCBtYXRjaCA9IF9yZWdleHAuZXhlYyh2YWx1ZSk7XG4gICAgICAgICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBfVVJJKF9lbXB0eSwgX2VtcHR5LCBfZW1wdHksIF9lbXB0eSwgX2VtcHR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgX1VSSShtYXRjaFsyXSB8fCBfZW1wdHksIGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFs0XSB8fCBfZW1wdHkpLCBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbNV0gfHwgX2VtcHR5KSwgZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzddIHx8IF9lbXB0eSksIGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFs5XSB8fCBfZW1wdHkpKTtcbiAgICAgICAgfVxuICAgICAgICBzdGF0aWMgZmlsZShwYXRoKSB7XG4gICAgICAgICAgICBsZXQgYXV0aG9yaXR5ID0gX2VtcHR5O1xuICAgICAgICAgICAgLy8gbm9ybWFsaXplIHRvIGZ3ZC1zbGFzaGVzIG9uIHdpbmRvd3MsXG4gICAgICAgICAgICAvLyBvbiBvdGhlciBzeXN0ZW1zIGJ3ZC1zbGFzaGVzIGFyZSB2YWxpZFxuICAgICAgICAgICAgLy8gZmlsZW5hbWUgY2hhcmFjdGVyLCBlZyAvZlxcb28vYmFcXHIudHh0XG4gICAgICAgICAgICBpZiAocGxhdGZvcm0uaXNXaW5kb3dzKSB7XG4gICAgICAgICAgICAgICAgcGF0aCA9IHBhdGgucmVwbGFjZSgvXFxcXC9nLCBfc2xhc2gpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gY2hlY2sgZm9yIGF1dGhvcml0eSBhcyB1c2VkIGluIFVOQyBzaGFyZXNcbiAgICAgICAgICAgIC8vIG9yIHVzZSB0aGUgcGF0aCBhcyBnaXZlblxuICAgICAgICAgICAgaWYgKHBhdGhbMF0gPT09IF9zbGFzaCAmJiBwYXRoWzFdID09PSBfc2xhc2gpIHtcbiAgICAgICAgICAgICAgICBsZXQgaWR4ID0gcGF0aC5pbmRleE9mKF9zbGFzaCwgMik7XG4gICAgICAgICAgICAgICAgaWYgKGlkeCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgYXV0aG9yaXR5ID0gcGF0aC5zdWJzdHJpbmcoMik7XG4gICAgICAgICAgICAgICAgICAgIHBhdGggPSBfc2xhc2g7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhdXRob3JpdHkgPSBwYXRoLnN1YnN0cmluZygyLCBpZHgpO1xuICAgICAgICAgICAgICAgICAgICBwYXRoID0gcGF0aC5zdWJzdHJpbmcoaWR4KSB8fCBfc2xhc2g7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRW5zdXJlIHRoYXQgcGF0aCBzdGFydHMgd2l0aCBhIHNsYXNoXG4gICAgICAgICAgICAvLyBvciB0aGF0IGl0IGlzIGF0IGxlYXN0IGEgc2xhc2hcbiAgICAgICAgICAgIGlmIChfZHJpdmVMZXR0ZXIudGVzdChwYXRoKSkge1xuICAgICAgICAgICAgICAgIHBhdGggPSBfc2xhc2ggKyBwYXRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocGF0aFswXSAhPT0gX3NsYXNoKSB7XG4gICAgICAgICAgICAgICAgLy8gdHJpY2t5IC0+IG1ha2VzIGludmFsaWQgcGF0aHNcbiAgICAgICAgICAgICAgICAvLyBidXQgb3RoZXJ3aXNlIHdlIGhhdmUgdG8gc3RvcFxuICAgICAgICAgICAgICAgIC8vIGFsbG93aW5nIHJlbGF0aXZlIHBhdGhzLi4uXG4gICAgICAgICAgICAgICAgcGF0aCA9IF9zbGFzaCArIHBhdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IF9VUkkoJ2ZpbGUnLCBhdXRob3JpdHksIHBhdGgsIF9lbXB0eSwgX2VtcHR5KTtcbiAgICAgICAgfVxuICAgICAgICBzdGF0aWMgZnJvbShjb21wb25lbnRzKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IF9VUkkoY29tcG9uZW50cy5zY2hlbWUsIGNvbXBvbmVudHMuYXV0aG9yaXR5LCBjb21wb25lbnRzLnBhdGgsIGNvbXBvbmVudHMucXVlcnksIGNvbXBvbmVudHMuZnJhZ21lbnQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIC0tLS0gcHJpbnRpbmcvZXh0ZXJuYWxpemUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gc2tpcEVuY29kaW5nIERvIG5vdCBlbmNvZGUgdGhlIHJlc3VsdCwgZGVmYXVsdCBpcyBgZmFsc2VgXG4gICAgICAgICAqL1xuICAgICAgICB0b1N0cmluZyhza2lwRW5jb2RpbmcgPSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIF9hc0Zvcm1hdHRlZCh0aGlzLCBza2lwRW5jb2RpbmcpO1xuICAgICAgICB9XG4gICAgICAgIHRvSlNPTigpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IHtcbiAgICAgICAgICAgICAgICAkbWlkOiAxLFxuICAgICAgICAgICAgICAgIGZzUGF0aDogdGhpcy5mc1BhdGgsXG4gICAgICAgICAgICAgICAgZXh0ZXJuYWw6IHRoaXMudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAodGhpcy5wYXRoKSB7XG4gICAgICAgICAgICAgICAgcmVzLnBhdGggPSB0aGlzLnBhdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5zY2hlbWUpIHtcbiAgICAgICAgICAgICAgICByZXMuc2NoZW1lID0gdGhpcy5zY2hlbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5hdXRob3JpdHkpIHtcbiAgICAgICAgICAgICAgICByZXMuYXV0aG9yaXR5ID0gdGhpcy5hdXRob3JpdHk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5xdWVyeSkge1xuICAgICAgICAgICAgICAgIHJlcy5xdWVyeSA9IHRoaXMucXVlcnk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5mcmFnbWVudCkge1xuICAgICAgICAgICAgICAgIHJlcy5mcmFnbWVudCA9IHRoaXMuZnJhZ21lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRpYyByZXZpdmUoZGF0YSkge1xuICAgICAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChkYXRhIGluc3RhbmNlb2YgVVJJKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gbmV3IF9VUkkoZGF0YSk7XG4gICAgICAgICAgICAgICAgcmVzdWx0Ll9mc1BhdGggPSBkYXRhLmZzUGF0aDtcbiAgICAgICAgICAgICAgICByZXN1bHQuX2Zvcm1hdHRlZCA9IGRhdGEuZXh0ZXJuYWw7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICB2c2NVcmkuVVJJID0gVVJJO1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjbGFzcy1uYW1lXG4gICAgY2xhc3MgX1VSSSBleHRlbmRzIFVSSSB7XG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgICAgIHRoaXMuX2Zvcm1hdHRlZCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLl9mc1BhdGggPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGdldCBmc1BhdGgoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2ZzUGF0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZzUGF0aCA9IF9tYWtlRnNQYXRoKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ZzUGF0aDtcbiAgICAgICAgfVxuICAgICAgICB0b1N0cmluZyhza2lwRW5jb2RpbmcgPSBmYWxzZSkge1xuICAgICAgICAgICAgaWYgKCFza2lwRW5jb2RpbmcpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2Zvcm1hdHRlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mb3JtYXR0ZWQgPSBfYXNGb3JtYXR0ZWQodGhpcywgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZm9ybWF0dGVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gd2UgZG9uJ3QgY2FjaGUgdGhhdFxuICAgICAgICAgICAgICAgIHJldHVybiBfYXNGb3JtYXR0ZWQodGhpcywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZSBgZnNQYXRoYCBmb3IgdGhlIGdpdmVuIHVyaVxuICAgICAqIEBwYXJhbSB1cmlcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBfbWFrZUZzUGF0aCh1cmkpIHtcbiAgICAgICAgbGV0IHZhbHVlO1xuICAgICAgICBpZiAodXJpLmF1dGhvcml0eSAmJiB1cmkucGF0aCAmJiB1cmkuc2NoZW1lID09PSAnZmlsZScpIHtcbiAgICAgICAgICAgIC8vIHVuYyBwYXRoOiBmaWxlOi8vc2hhcmVzL2MkL2Zhci9ib29cbiAgICAgICAgICAgIHZhbHVlID0gYC8vJHt1cmkuYXV0aG9yaXR5fSR7dXJpLnBhdGh9YDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChfZHJpdmVMZXR0ZXJQYXRoLnRlc3QodXJpLnBhdGgpKSB7XG4gICAgICAgICAgICAvLyB3aW5kb3dzIGRyaXZlIGxldHRlcjogZmlsZTovLy9jOi9mYXIvYm9vXG4gICAgICAgICAgICB2YWx1ZSA9IHVyaS5wYXRoWzFdLnRvTG93ZXJDYXNlKCkgKyB1cmkucGF0aC5zdWJzdHIoMik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBvdGhlciBwYXRoXG4gICAgICAgICAgICB2YWx1ZSA9IHVyaS5wYXRoO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwbGF0Zm9ybS5pc1dpbmRvd3MpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvXFwvL2csICdcXFxcJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgdGhlIGV4dGVybmFsIHZlcnNpb24gb2YgYSB1cmlcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBfYXNGb3JtYXR0ZWQodXJpLCBza2lwRW5jb2RpbmcpIHtcbiAgICAgICAgY29uc3QgZW5jb2RlciA9ICFza2lwRW5jb2RpbmdcbiAgICAgICAgICAgID8gZW5jb2RlVVJJQ29tcG9uZW50MlxuICAgICAgICAgICAgOiBlbmNvZGVOb29wO1xuICAgICAgICBjb25zdCBwYXJ0cyA9IFtdO1xuICAgICAgICBsZXQgeyBzY2hlbWUsIGF1dGhvcml0eSwgcGF0aCwgcXVlcnksIGZyYWdtZW50IH0gPSB1cmk7XG4gICAgICAgIGlmIChzY2hlbWUpIHtcbiAgICAgICAgICAgIHBhcnRzLnB1c2goc2NoZW1lLCAnOicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhdXRob3JpdHkgfHwgc2NoZW1lID09PSAnZmlsZScpIHtcbiAgICAgICAgICAgIHBhcnRzLnB1c2goJy8vJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGF1dGhvcml0eSkge1xuICAgICAgICAgICAgbGV0IGlkeCA9IGF1dGhvcml0eS5pbmRleE9mKCdAJyk7XG4gICAgICAgICAgICBpZiAoaWR4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHVzZXJpbmZvID0gYXV0aG9yaXR5LnN1YnN0cigwLCBpZHgpO1xuICAgICAgICAgICAgICAgIGF1dGhvcml0eSA9IGF1dGhvcml0eS5zdWJzdHIoaWR4ICsgMSk7XG4gICAgICAgICAgICAgICAgaWR4ID0gdXNlcmluZm8uaW5kZXhPZignOicpO1xuICAgICAgICAgICAgICAgIGlmIChpZHggPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnRzLnB1c2goZW5jb2Rlcih1c2VyaW5mbykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGFydHMucHVzaChlbmNvZGVyKHVzZXJpbmZvLnN1YnN0cigwLCBpZHgpKSwgJzonLCBlbmNvZGVyKHVzZXJpbmZvLnN1YnN0cihpZHggKyAxKSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwYXJ0cy5wdXNoKCdAJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhdXRob3JpdHkgPSBhdXRob3JpdHkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIGlkeCA9IGF1dGhvcml0eS5pbmRleE9mKCc6Jyk7XG4gICAgICAgICAgICBpZiAoaWR4ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIHBhcnRzLnB1c2goZW5jb2RlcihhdXRob3JpdHkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhcnRzLnB1c2goZW5jb2RlcihhdXRob3JpdHkuc3Vic3RyKDAsIGlkeCkpLCBhdXRob3JpdHkuc3Vic3RyKGlkeCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwYXRoKSB7XG4gICAgICAgICAgICAvLyBsb3dlci1jYXNlIHdpbmRvd3MgZHJpdmUgbGV0dGVycyBpbiAvQzovZmZmIG9yIEM6L2ZmZlxuICAgICAgICAgICAgY29uc3QgbSA9IF91cHBlckNhc2VEcml2ZS5leGVjKHBhdGgpO1xuICAgICAgICAgICAgaWYgKG0pIHtcbiAgICAgICAgICAgICAgICBpZiAobVsxXSkge1xuICAgICAgICAgICAgICAgICAgICBwYXRoID0gJy8nICsgbVsyXS50b0xvd2VyQ2FzZSgpICsgcGF0aC5zdWJzdHIoMyk7IC8vIFwiL2M6XCIubGVuZ3RoID09PSAzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwYXRoID0gbVsyXS50b0xvd2VyQ2FzZSgpICsgcGF0aC5zdWJzdHIoMik7IC8vIC8vIFwiYzpcIi5sZW5ndGggPT09IDJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlbmNvZGUgZXZlcnkgc2VnZW1lbnQgYnV0IG5vdCBzbGFzaGVzXG4gICAgICAgICAgICAvLyBtYWtlIHN1cmUgdGhhdCAjIGFuZCA/IGFyZSBhbHdheXMgZW5jb2RlZFxuICAgICAgICAgICAgLy8gd2hlbiBvY2N1cnJpbmcgaW4gcGF0aHMgLSBvdGhlcndpc2UgdGhlIHJlc3VsdFxuICAgICAgICAgICAgLy8gY2Fubm90IGJlIHBhcnNlZCBiYWNrIGFnYWluXG4gICAgICAgICAgICBsZXQgbGFzdElkeCA9IDA7XG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgICAgIGxldCBpZHggPSBwYXRoLmluZGV4T2YoX3NsYXNoLCBsYXN0SWR4KTtcbiAgICAgICAgICAgICAgICBpZiAoaWR4ID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZXIocGF0aC5zdWJzdHJpbmcobGFzdElkeCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBhcnRzLnB1c2goZW5jb2RlcihwYXRoLnN1YnN0cmluZyhsYXN0SWR4LCBpZHgpKSwgX3NsYXNoKTtcbiAgICAgICAgICAgICAgICBsYXN0SWR4ID0gaWR4ICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocXVlcnkpIHtcbiAgICAgICAgICAgIHBhcnRzLnB1c2goJz8nLCBlbmNvZGVyKHF1ZXJ5KSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZyYWdtZW50KSB7XG4gICAgICAgICAgICBwYXJ0cy5wdXNoKCcjJywgZW5jb2RlcihmcmFnbWVudCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJ0cy5qb2luKF9lbXB0eSk7XG4gICAgfVxufSkodnNjVXJpID0gZXhwb3J0cy52c2NVcmkgfHwgKGV4cG9ydHMudnNjVXJpID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVyaS5qcy5tYXAiXX0=