"use strict";

const cp = require("child_process");

const {
  Directory
} = require("atom");

const VIRTUAL_ENV_BIN_DIRS = ["bin", "Scripts"];
const VIRTUAL_ENV_EXECUTABLES = ["python", "python.exe"];

function detectPipEnv(path) {
  return new Promise(resolve => {
    const pipEnvProcess = cp.spawn("pipenv", ["--venv"], {
      cwd: path
    });
    pipEnvProcess.stdout.on("data", data => {
      resolve(`${data}`.trim());
    });
    pipEnvProcess.stderr.on("data", () => {
      resolve(null);
    });
    pipEnvProcess.on("error", () => {
      resolve(null);
    });
  });
}

async function detectVirtualEnv(path) {
  const entries = await new Promise(resolve => new Directory(path).getEntries((error, entries) => {
    if (error === null) {
      resolve(entries);
    } else {
      resolve(null);
    }
  }));

  if (entries) {
    for (let entry of entries) {
      if (entry.isDirectory()) {
        if (VIRTUAL_ENV_BIN_DIRS.indexOf(entry.getBaseName()) !== -1) {
          for (let executable of VIRTUAL_ENV_EXECUTABLES) {
            if (await entry.getFile(executable).exists()) {
              return path;
            }
          }
        } else {
          for (let dir_name of VIRTUAL_ENV_BIN_DIRS) {
            for (let executable of VIRTUAL_ENV_EXECUTABLES) {
              if (await entry.getSubdirectory(dir_name).getFile(executable).exists()) {
                return entry.getPath();
              }
            }
          }
        }
      }
    }
  }
}

function sanitizeConfig(config) {
  Object.entries(config).forEach(([key, value]) => {
    if (value === "null") {
      config[key] = null;
    }
  });
  return config;
}

function replacePipEnvPathVar(pythonPath, pipEnvPath) {
  if (pythonPath.indexOf("$PIPENV_PATH") !== -1 && pipEnvPath) {
    return pythonPath.replace("$PIPENV_PATH", pipEnvPath);
  }

  return pythonPath;
}

exports.detectVirtualEnv = detectVirtualEnv;
exports.sanitizeConfig = sanitizeConfig;
exports.detectPipEnv = detectPipEnv;
exports.replacePipEnvPathVar = replacePipEnvPathVar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxzLmpzIl0sIm5hbWVzIjpbImNwIiwicmVxdWlyZSIsIkRpcmVjdG9yeSIsIlZJUlRVQUxfRU5WX0JJTl9ESVJTIiwiVklSVFVBTF9FTlZfRVhFQ1VUQUJMRVMiLCJkZXRlY3RQaXBFbnYiLCJwYXRoIiwiUHJvbWlzZSIsInJlc29sdmUiLCJwaXBFbnZQcm9jZXNzIiwic3Bhd24iLCJjd2QiLCJzdGRvdXQiLCJvbiIsImRhdGEiLCJ0cmltIiwic3RkZXJyIiwiZGV0ZWN0VmlydHVhbEVudiIsImVudHJpZXMiLCJnZXRFbnRyaWVzIiwiZXJyb3IiLCJlbnRyeSIsImlzRGlyZWN0b3J5IiwiaW5kZXhPZiIsImdldEJhc2VOYW1lIiwiZXhlY3V0YWJsZSIsImdldEZpbGUiLCJleGlzdHMiLCJkaXJfbmFtZSIsImdldFN1YmRpcmVjdG9yeSIsImdldFBhdGgiLCJzYW5pdGl6ZUNvbmZpZyIsImNvbmZpZyIsIk9iamVjdCIsImZvckVhY2giLCJrZXkiLCJ2YWx1ZSIsInJlcGxhY2VQaXBFbnZQYXRoVmFyIiwicHl0aG9uUGF0aCIsInBpcEVudlBhdGgiLCJyZXBsYWNlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNQSxFQUFFLEdBQUdDLE9BQU8sQ0FBQyxlQUFELENBQWxCOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFnQkQsT0FBTyxDQUFDLE1BQUQsQ0FBN0I7O0FBRUEsTUFBTUUsb0JBQW9CLEdBQUcsQ0FBQyxLQUFELEVBQVEsU0FBUixDQUE3QjtBQUNBLE1BQU1DLHVCQUF1QixHQUFHLENBQUMsUUFBRCxFQUFXLFlBQVgsQ0FBaEM7O0FBRUEsU0FBU0MsWUFBVCxDQUFzQkMsSUFBdEIsRUFBNEI7QUFDMUIsU0FBTyxJQUFJQyxPQUFKLENBQVlDLE9BQU8sSUFBSTtBQUM1QixVQUFNQyxhQUFhLEdBQUdULEVBQUUsQ0FBQ1UsS0FBSCxDQUFTLFFBQVQsRUFBbUIsQ0FBQyxRQUFELENBQW5CLEVBQStCO0FBQ25EQyxNQUFB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VixjQUFSLEdBQXlCQSxjQUF6QjtBQUNBVSxPQUFPLENBQUNwQyxZQUFSLEdBQXVCQSxZQUF2QjtBQUNBb0MsT0FBTyxDQUFDSixvQkFBUixHQUErQkEsb0JBQS9CIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY3AgPSByZXF1aXJlKFwiY2hpbGRfcHJvY2Vzc1wiKTtcbmNvbnN0IHsgRGlyZWN0b3J5IH0gPSByZXF1aXJlKFwiYXRvbVwiKTtcblxuY29uc3QgVklSVFVBTF9FTlZfQklOX0RJUlMgPSBbXCJiaW5cIiwgXCJTY3JpcHRzXCJdO1xuY29uc3QgVklSVFVBTF9FTlZfRVhFQ1VUQUJMRVMgPSBbXCJweXRob25cIiwgXCJweXRob24uZXhlXCJdO1xuXG5mdW5jdGlvbiBkZXRlY3RQaXBFbnYocGF0aCkge1xuICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgY29uc3QgcGlwRW52UHJvY2VzcyA9IGNwLnNwYXduKFwicGlwZW52XCIsIFtcIi0tdmVudlwiXSwge1xuICAgICAgY3dkOiBwYXRoXG4gICAgfSk7XG4gICAgcGlwRW52UHJvY2Vzcy5zdGRvdXQub24oXCJkYXRhXCIsIGRhdGEgPT4ge1xuICAgICAgcmVzb2x2ZShgJHtkYXRhfWAudHJpbSgpKTtcbiAgICB9KTtcbiAgICBwaXBFbnZQcm9jZXNzLnN0ZGVyci5vbihcImRhdGFcIiwgKCkgPT4ge1xuICAgICAgcmVzb2x2ZShudWxsKTtcbiAgICB9KTtcbiAgICBwaXBFbnZQcm9jZXNzLm9uKFwiZXJyb3JcIiwgKCkgPT4ge1xuICAgICAgcmVzb2x2ZShudWxsKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRldGVjdFZpcnR1YWxFbnYocGF0aCkge1xuICBjb25zdCBlbnRyaWVzID0gYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PlxuICAgIG5ldyBEaXJlY3RvcnkocGF0aCkuZ2V0RW50cmllcygoZXJyb3IsIGVudHJpZXMpID0+IHtcbiAgICAgIGlmIChlcnJvciA9PT0gbnVsbCkge1xuICAgICAgICByZXNvbHZlKGVudHJpZXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzb2x2ZShudWxsKTtcbiAgICAgIH1cbiAgICB9KVxuICApO1xuICBpZiAoZW50cmllcykge1xuICAgIGZvciAobGV0IGVudHJ5IG9mIGVudHJpZXMpIHtcbiAgICAgIGlmIChlbnRyeS5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICAgIGlmIChWSVJUVUFMX0VOVl9CSU5fRElSUy5pbmRleE9mKGVudHJ5LmdldEJhc2VOYW1lKCkpICE9PSAtMSkge1xuICAgICAgICAgIGZvciAobGV0IGV4ZWN1dGFibGUgb2YgVklSVFVBTF9FTlZfRVhFQ1VUQUJMRVMpIHtcbiAgICAgICAgICAgIGlmIChhd2FpdCBlbnRyeS5nZXRGaWxlKGV4ZWN1dGFibGUpLmV4aXN0cygpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBwYXRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmb3IgKGxldCBkaXJfbmFtZSBvZiBWSVJUVUFMX0VOVl9CSU5fRElSUykge1xuICAgICAgICAgICAgZm9yIChsZXQgZXhlY3V0YWJsZSBvZiBWSVJUVUFMX0VOVl9FWEVDVVRBQkxFUykge1xuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgYXdhaXQgZW50cnlcbiAgICAgICAgICAgICAgICAgIC5nZXRTdWJkaXJlY3RvcnkoZGlyX25hbWUpXG4gICAgICAgICAgICAgICAgICAuZ2V0RmlsZShleGVjdXRhYmxlKVxuICAgICAgICAgICAgICAgICAgLmV4aXN0cygpXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbnRyeS5nZXRQYXRoKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc2FuaXRpemVDb25maWcoY29uZmlnKSB7XG4gIE9iamVjdC5lbnRyaWVzKGNvbmZpZykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgaWYgKHZhbHVlID09PSBcIm51bGxcIikge1xuICAgICAgY29uZmlnW2tleV0gPSBudWxsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjb25maWc7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VQaXBFbnZQYXRoVmFyKHB5dGhvblBhdGgsIHBpcEVudlBhdGgpIHtcbiAgaWYgKHB5dGhvblBhdGguaW5kZXhPZihcIiRQSVBFTlZfUEFUSFwiKSAhPT0gLTEgJiYgcGlwRW52UGF0aCkge1xuICAgIHJldHVybiBweXRob25QYXRoLnJlcGxhY2UoXCIkUElQRU5WX1BBVEhcIiwgcGlwRW52UGF0aCk7XG4gIH1cbiAgcmV0dXJuIHB5dGhvblBhdGg7XG59XG5cbmV4cG9ydHMuZGV0ZWN0VmlydHVhbEVudiA9IGRldGVjdFZpcnR1YWxFbnY7XG5leHBvcnRzLnNhbml0aXplQ29uZmlnID0gc2FuaXRpemVDb25maWc7XG5leHBvcnRzLmRldGVjdFBpcEVudiA9IGRldGVjdFBpcEVudjtcbmV4cG9ydHMucmVwbGFjZVBpcEVudlBhdGhWYXIgPSByZXBsYWNlUGlwRW52UGF0aFZhcjtcbiJdfQ==